import { motion, AnimatePresence } from 'framer-motion';
import { X, ChevronLeft, ChevronRight, Clock, User, Share2, Bookmark } from 'lucide-react';
import { BlogPost } from '../../types/blog';
import { format } from 'date-fns';
import { useEffect, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { vscDarkPlus } from 'react-syntax-highlighter/dist/cjs/styles/prism';


interface BlogModalProps {
  post: BlogPost | null;
  onClose: () => void;
  onNext: () => void;
  onPrevious: () => void;
  hasNext: boolean;
  hasPrevious: boolean;
}

const BlogModal: React.FC<BlogModalProps> = ({
  post,
  onClose,
  onNext,
  onPrevious,
  hasNext,
  hasPrevious,
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    if (post) {
      document.body.style.overflow = 'hidden';
      setIsMounted(true);
      const timer = setTimeout(() => setIsVisible(true), 10);
      return () => clearTimeout(timer);
    } else {
      setIsVisible(false);
      const timer = setTimeout(() => {
        setIsMounted(false);
        document.body.style.overflow = 'auto';
      }, 300);
      return () => clearTimeout(timer);
    }
  }, [post]);

  if (!isMounted) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 overflow-y-auto">
        {/* Backdrop */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: isVisible ? 1 : 0 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/75 backdrop-blur-sm"
          onClick={onClose}
        />

        {/* Modal */}
        <div className="flex items-center justify-center min-h-screen p-4">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 50 }}
            exit={{ opacity: 0, y: 50 }}
            transition={{ type: 'spring', damping: 25, stiffness: 300 }}
            className="relative w-full max-w-5xl bg-white rounded-xl shadow-2xl overflow-hidden flex flex-col h-[90vh]"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="relative h-64 bg-gray-100">
              {post?.coverImage && (
                <img
                  src={post.coverImage}
                  alt={post.title}
                  className="w-full h-full object-cover"
                />
              )}
              <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent" />
              
              <div className="absolute top-4 right-4">
                <button
                  onClick={onClose}
                  className="p-2 bg-white/90 rounded-full text-gray-800 hover:bg-white transition-colors"
                  aria-label="Close modal"
                >
                  <X size={20} />
                </button>
              </div>

              <div className="absolute bottom-0 left-0 right-0 p-6 text-white">
                <div className="flex flex-wrap gap-2 mb-3">
                  {post?.tags.map((tag) => (
                    <span
                      key={tag}
                      className="px-3 py-1 text-xs font-medium bg-white/20 rounded-full backdrop-blur-sm"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
                <h1 className="text-3xl md:text-4xl font-bold mb-2">{post?.title}</h1>
                <div className="flex items-center text-sm text-white/90">
                  <div className="flex items-center mr-6">
                    <User size={16} className="mr-1" />
                    {post?.author.name}
                  </div>
                  <div className="flex items-center">
                    <Clock size={16} className="mr-1" />
                    {post && format(new Date(post.publishedAt), 'MMMM d, yyyy')} • {post?.readTime} min read
                  </div>
                </div>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6 md:p-8">
              <div className="prose max-w-none">
                <ReactMarkdown
                  remarkPlugins={[remarkGfm]}
                  components={{
                    code({
                      node,
                      inline,
                      className,
                      children,
                      ...props
                    }: {
                      node?: any;
                      inline?: boolean;
                      className?: string;
                      children: React.ReactNode;
                      [key: string]: any;
                    }) => {
                      const match = /language-(\w+)/.exec(className || '');
                      return !inline && match ? (
                        <SyntaxHighlighter
                          style={vscDarkPlus}
                          language={match[1]}
                          PreTag="div"
                          {...props}
                        >
                          {String(children).replace(/\n$/, '')}
                        </SyntaxHighlighter>
                      ) : (
                        <code className={className} {...props}>
                          {children}
                        </code>
                      );
                    },
                    img: ({
                      node,
                      ...props
                    }: {
                      node?: any;
                      alt?: string;
                      [key: string]: any;
                    }) => (
                      <div className="my-6 rounded-lg overflow-hidden shadow-lg">
                        <img {...props} className="w-full h-auto" alt={props.alt || ''} />
                      </div>
                    ),
                    blockquote: ({
                      );
                    },
                    img({
                      node,
                      ...props
                    }: {
                      node?: any;
                      [key: string]: any;
                    }) {
                      return <img className="rounded-lg my-4" {...props} />;
                    }
                        {...props}
                      />
                    ),
                  }}
                >
                  {post?.content || ''}
                </ReactMarkdown>

                {/* Why It Matters Section */}
                {post?.whyItMatters && (
                  <div className="mt-12 p-6 bg-blue-50 rounded-xl border border-blue-100">
                    <h3 className="text-xl font-semibold text-blue-800 mb-3">✨ Why This Matters</h3>
                    <p className="text-blue-700">{post.whyItMatters}</p>
                  </div>
                )}
              </div>

              {/* Author Bio */}
              {post?.author && (
                <div className="mt-12 pt-6 border-t border-gray-200">
                  <div className="flex items-start">
                    <div className="w-16 h-16 rounded-full overflow-hidden mr-4">
                      <img
                  src={post.author.avatar}
                  alt={post.author.name}
                  className="w-16 h-16 object-cover"
                />
                    </div>
                    <div>
                      <h4 className="font-semibold text-lg">{post.author.name}</h4>
                      <p className="text-gray-600 text-sm">{post.author.role}</p>
                      <p className="text-gray-700 mt-2">{post.author.bio}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Footer */}
            <div className="border-t border-gray-200 p-4 bg-gray-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <button 
                    className="p-2 text-gray-600 hover:text-accent1 transition-colors"
                    onClick={onClose}
                    aria-label="Close"
                  >
                    <X size={20} />
                  </button>
                  <button 
                    className="p-2 text-gray-600 hover:text-accent1 transition-colors"
                    onClick={() => {}}
                    aria-label="Save for later"
                  >
                    <Bookmark size={20} />
                  </button>
                  <button 
                    className="p-2 text-gray-600 hover:text-accent1 transition-colors"
                    onClick={() => {}}
                    aria-label="Share"
                  >
                    <Share2 size={20} />
                  </button>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={onPrevious}
                    disabled={!hasPrevious}
                    className={`p-2 rounded-full ${hasPrevious ? 'text-gray-700 hover:bg-gray-200' : 'text-gray-300'} transition-colors`}
                    aria-label="Previous post"
                  >
                    <ChevronLeft size={20} />
                  </button>
                  <button
                    onClick={onNext}
                    disabled={!hasNext}
                    className={`p-2 rounded-full ${hasNext ? 'text-gray-700 hover:bg-gray-200' : 'text-gray-300'} transition-colors`}
                    aria-label="Next post"
                  >
                    <ChevronRight size={20} />
                  </button>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </AnimatePresence>
  );
};

export default BlogModal;
